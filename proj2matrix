import math


class SquareMatrix:
    def __init__(self, size):
        self.N = size
        self.mat = []
        for _ in range(self.N):
            self.mat.append([])
        self.row = 0  # raczej niepotrzebne pole
        self.col = 0

    def matAddMat(self, mat2: 'SquareMatrix') -> 'SquareMatrix':  # '  ' -> forward reference, class doesn't exist yet
        # newMat = SquareMatrix(self.N)
        for row in range(self.N):
            #     newMat.mat[row] += ([sum(val) for val in zip(self.mat[row], mat2.mat[row])])
            self.mat[row] = ([sum(val) for val in zip(self.mat[row], mat2.mat[row])])

    def matMulVec(self, vec):
        newVec = []
        for row in range(self.N):
            num = 0
            for col in range(self.N):
                num += self.mat[row][col] * vec[row]
            newVec.append(num)
        return newVec

    def matMulScalar(self, scalar):
        for row in range(self.N):
            self.mat[row] = (val * scalar for val in self.mat[row])

    def matTrUpper(self):
        newMat = SquareMatrix(self.N)
        for row in range(self.N):
            newMat.mat.append([])
            for col in range(self.N):
                if row > col:
                    newMat.mat[row].append(0)
                else:
                    newMat.mat[row].append(self.mat[row][col])
        return newMat

    def matTrLower(self):
        newMat = SquareMatrix(self.N)
        for row in range(self.N):
            newMat.mat.append([])
            for col in range(self.N):
                if row < col:
                    newMat.mat[row].append(0)
                else:
                    newMat.mat[row].append(self.mat[row][col])
        return newMat

    def matPrint(self):
        for row in range(self.N):
            print(*self.mat[row])  # * -> print whole array in one line
            print()

    def matTestCreate(self):
        for row in range(self.N):
            for col in range(self.N):
                self.mat[row].append(1)

    def matBandCreate(self):
        a1 = 5 + 7
        a2 = -1
        a3 = -1
        start = 2
        current = start
        band = [a3, a2, a1, a2, a3]
        width = len(band)

        for row in range(self.N):
            zeroStart = math.ceil(width / 2) + row
            zeroEnd = -math.ceil(width / 2) + row
            for col in range(self.N):

                if col >= zeroStart or col <= zeroEnd:
                    num = 0
                else:
                    num = band[current]
                    current += 1
                # self.matAppend(num)
                self.mat[row].append(num)

            if start > 0:
                start -= 1
            current = start


N = 9 * 2 * 5
#
# s = SquareMatrix(N)
# s.matBandCreate()
# s.matPrint()
# d = SquareMatrix(N)
# d.matBandCreate()
# s = s.matAddMat(d)
# s.matPrint()
test = SquareMatrix(N)
test.matTestCreate()
# test = test.matTrUpper()
# test.matPrint()

# test.matTestCreate()test.matPrint()
# test.matPrint()

test = test.matTrLower()
test.matPrint()

# test = test.matAddMat(test)
# test.matMulScalar(2)
# test.matPrint()
tvec = []
for i in range(N):
    tvec.append(10)

v = test.matMulVec(tvec)
print(v)

b = []
# for i in range(N):
#   b.append(math.sin(i * (8 + 1)))

# print(b)
